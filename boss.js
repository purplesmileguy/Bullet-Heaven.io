class Boss {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.width = 80;
        this.height = 80;
        this.hp = 50;
        this.maxHp = 50;
        this.phase = 1;
        this.attackTimer = 0;
        this.attackPattern = 0;
        this.isVulnerable = false;
        this.vulnerabilityTimer = 0;
        this.chargeTimer = 0;
        this.isCharging = false;
        this.phaseTransitionTimer = 0;
    }
    
    update() {
        this.attackTimer++;
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏
        if (this.hp <= 40 && this.phase === 1) {
            this.phase = 2;
            game.showPhaseIndicator('PHASE 2: RAGE!');
            this.phaseTransitionTimer = 120;
        }
        
        if (this.hp <= 20 && this.phase === 2) {
            this.phase = 3;
            game.showPhaseIndicator('PHASE 3: LUDICRIOUS!');
            this.phaseTransitionTimer = 120;
        }
        
        if (this.phaseTransitionTimer > 0) {
            this.phaseTransitionTimer--;
            return;
        }
        
        // –û–∫–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (this.vulnerabilityTimer > 0) {
            this.vulnerabilityTimer--;
            this.isVulnerable = this.vulnerabilityTimer > 0;
        }
        
        // –ó–∞—Ä—è–¥–∫–∞ –∞—Ç–∞–∫–∏
        if (this.isCharging) {
            this.chargeTimer--;
            if (this.chargeTimer <= 0) {
                this.executeAttack();
                this.isCharging = false;
                this.vulnerabilityTimer = 60; // 1 —Å–µ–∫—É–Ω–¥–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            }
            return;
        }
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∞—Ç–∞–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
        let attackInterval = this.getAttackInterval();
        
        if (this.attackTimer >= attackInterval) {
            this.startAttack();
            this.attackTimer = 0;
        }
    }
    
    getAttackInterval() {
        switch (this.phase) {
            case 1: return 120; // 2 —Å–µ–∫—É–Ω–¥—ã
            case 2: return 90;  // 1.5 —Å–µ–∫—É–Ω–¥—ã
            case 3: return 60;  // 1 —Å–µ–∫—É–Ω–¥–∞
        }
    }
    
    startAttack() {
        this.isCharging = true;
        this.chargeTimer = 60; // 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞—Ä—è–¥–∫–∏
        
        // –í—ã–±–æ—Ä –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∞—Ç–∞–∫–∏
        switch (this.phase) {
            case 1:
                this.attackPattern = Math.floor(Math.random() * 8);
                break;
            case 2:
                this.attackPattern = Math.floor(Math.random() * 15);
                break;
            case 3:
                this.attackPattern = Math.floor(Math.random() * 23);
                break;
        }
    }
    
    executeAttack() {
        switch (this.attackPattern) {
            case 0:
                this.laserSweep();
                break;
            case 1:
                this.pulseNova();
                break;
            case 2:
                this.spreadShot();
                break;
            case 3:
                this.spiralAttack();
                break;
            case 4:
                this.rapidFire();
                break;
            case 5:
                this.crossPattern();
                break;
            case 6:
                this.chaosStorm();
                break;
            case 7:
                this.zigzagLasers();
                break;
            case 8:
                this.orbitingShields();
                break;
            case 9:
                this.teleportStrike();
                break;
            case 10:
                this.mirrorAttack();
                break;
            case 11:
                this.gravitationalPull();
                break;
            case 12:
                this.bounceShots();
                break;
            case 13:
                this.timeDelayBombs();
                break;
            case 14:
                this.phantomClones();
                break;
            case 15:
                this.sineWaveAttack();
                break;
            case 16:
                this.vortexTrap();
                break;
            case 17:
                this.railgunSnipe();
                break;
            case 18:
                this.fragmentationBurst();
                break;
            case 19:
                this.shadowStep();
                break;
            case 20:
                this.energyBarrier();
                break;
            case 21:
                this.meteorShower();
                break;
            case 22:
                this.fallingMeteorites();
                break;
            case 23:
                this.tornadoAttack();
                break;
        }
    }
    
    laserSweep() {
        // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –ª–∞–∑–µ—Ä
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                game.addProjectile(new Projectile(i * 40, this.y + 50, 0, 4, true));
            }, i * 50);
        }
    }
    
    pulseNova() {
        // –í–æ–ª–Ω—ã –ø–æ –∫—Ä—É–≥—É
        for (let wave = 0; wave < 3; wave++) {
            setTimeout(() => {
                for (let i = 0; i < 12; i++) {
                    let angle = (i * 30) * Math.PI / 180;
                    let vx = Math.cos(angle) * 3;
                    let vy = Math.sin(angle) * 3;
                    game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
                }
            }, wave * 300);
        }
    }
    
    spreadShot() {
        // –í–µ–µ—Ä —Å–Ω–∞—Ä—è–¥–æ–≤
        for (let i = -4; i <= 4; i++) {
            let angle = i * 15 * Math.PI / 180;
            let vx = Math.sin(angle) * 5;
            let vy = Math.cos(angle) * 5;
            game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
        }
    }
    
    spiralAttack() {
        // –°–ø–∏—Ä–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞
        for (let i = 0; i < 30; i++) {
            setTimeout(() => {
                let angle = (i * 12) * Math.PI / 180;
                let vx = Math.cos(angle) * 4;
                let vy = Math.sin(angle) * 4;
                game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
            }, i * 100);
        }
    }
    
    rapidFire() {
        // –ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–µ–ª—å–±–∞ –ø–æ –∏–≥—Ä–æ–∫—É
        for (let i = 0; i < 8; i++) {
            setTimeout(() => {
                let dx = game.player.x - this.x;
                let dy = game.player.y - this.y;
                let dist = Math.sqrt(dx*dx + dy*dy);
                let vx = (dx / dist) * 6;
                let vy = (dy / dist) * 6;
                game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
            }, i * 150);
        }
    }
    tornadoAttack() {
        let numProjectiles = 12; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∞—Ä—è–¥–æ–≤
        let radius = 40; // –†–∞–¥–∏—É—Å —Å–ø–∏—Ä–∞–ª–∏
        let angleOffset = Math.random() * Math.PI * 2; // –°–ª—É—á–∞–π–Ω—ã–π —Å–¥–≤–∏–≥ —É–≥–ª–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    
        for (let i = 0; i < numProjectiles; i++) {
            let angle = (i * (Math.PI * 2) / numProjectiles) + angleOffset; // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ —Å–Ω–∞—Ä—è–¥–æ–≤
            let speed = 3 + Math.random() * 2; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
    
            let vx = Math.cos(angle) * speed;
            let vy = Math.sin(angle) * speed;
    
            // –ö–∞–∂–¥–æ–µ —Å–Ω–∞—Ä—è–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ —Å–ø–∏—Ä–∞–ª–∏
            setInterval(() => {
                vx += Math.cos(angle) * 0.1; // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ –∫—Ä—É–≥—É
                vy += Math.sin(angle) * 0.1;
            }, 50);
    
            // –°–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
        }
    }
    
    fallingMeteorites() {
        let numMeteors = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–µ–æ—Ä–∏—Ç–æ–≤
    
        for (let i = 0; i < numMeteors; i++) {
            let x = Math.random() * game.width; // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ –æ—Å–∏ X
            let speed = 5 + Math.random() * 3; // –°–ª—É—á–∞–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è
            let angle = Math.random() * Math.PI / 4 - Math.PI / 8; // –°–ª—É—á–∞–π–Ω—ã–π —É–≥–æ–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    
            let vx = Math.sin(angle) * speed;
            let vy = Math.cos(angle) * speed;
    
            // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–µ–æ—Ä–∏—Ç
            setInterval(() => {
                vx += (Math.random() - 0.5) * 0.5; // –õ–µ–≥–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                vy += 0.2; // –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
    
                if (vy > 7) vy = 7; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ –º–µ—Ç–µ–æ—Ä–∏—Ç–∞
            }, 50);
    
            game.addProjectile(new Projectile(x, -20, vx, vy, true)); // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –º–µ—Ç–µ–æ—Ä–∏—Ç–∞ —Å–≤–µ—Ä—Ö—É
        }
    }
    
    crossPattern() {
        // –ö—Ä–µ—Å—Ç–æ–æ–±—Ä–∞–∑–Ω–∞—è –∞—Ç–∞–∫–∞
        let directions = [[0, 1], [0, -1], [1, 0], [-1, 0], [1, 1], [-1, -1], [1, -1], [-1, 1]];
        directions.forEach(([dx, dy]) => {
            for (let i = 1; i <= 5; i++) {
                setTimeout(() => {
                    game.addProjectile(new Projectile(this.x, this.y, dx * 4, dy * 4, true));
                }, i * 200);
            }
        });
    }
    
    chaosStorm() {
        // –•–∞–æ—Ç–∏—á–Ω–∞—è –∞—Ç–∞–∫–∞
        for (let i = 0; i < 20; i++) {
            setTimeout(() => {
                let angle = Math.random() * Math.PI * 2;
                let speed = 3 + Math.random() * 4;
                let vx = Math.cos(angle) * speed;
                let vy = Math.sin(angle) * speed;
                game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
            }, Math.random() * 1000);
        }
    }
    
    // üî• –ù–û–í–´–ï –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ü–ê–¢–¢–ï–†–ù–´ –ê–¢–ê–ö üî•
    
    zigzagLasers() {
        // –ó–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ª–∞–∑–µ—Ä—ã
        for (let i = 0; i < 8; i++) {
            setTimeout(() => {
                let direction = i % 2 === 0 ? 1 : -1;
                for (let j = 0; j < 10; j++) {
                    setTimeout(() => {
                        let x = 50 + j * 70;
                        let y = 200 + Math.sin(j * 0.5) * 100 * direction;
                        game.addProjectile(new Projectile(x, y, 0, 5, true));
                    }, j * 50);
                }
            }, i * 200);
        }
    }
    
    orbitingShields() {
        // –í—Ä–∞—â–∞—é—â–∏–µ—Å—è —â–∏—Ç—ã-—Å–Ω–∞—Ä—è–¥—ã
        for (let orbit = 0; orbit < 3; orbit++) {
            for (let i = 0; i < 8; i++) {
                setTimeout(() => {
                    let radius = 80 + orbit * 40;
                    let angle = (i * 45 + Date.now() * 0.01) * Math.PI / 180;
                    let x = this.x + Math.cos(angle) * radius;
                    let y = this.y + Math.sin(angle) * radius;
                    let vx = Math.cos(angle + Math.PI/2) * 2;
                    let vy = Math.sin(angle + Math.PI/2) * 2;
                    game.addProjectile(new Projectile(x, y, vx, vy, true));
                }, orbit * 500 + i * 100);
            }
        }
    }
    
    teleportStrike() {
        // –¢–µ–ª–µ–ø–æ—Ä—Ç —Å –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∞—Ç–∞–∫–æ–π
        let originalX = this.x;
        let originalY = this.y;
        
        // –¢–µ–ª–µ–ø–æ—Ä—Ç –∫ –∏–≥—Ä–æ–∫—É
        this.x = game.player.x;
        this.y = game.player.y - 100;
        
        // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞
        for (let i = 0; i < 12; i++) {
            let angle = (i * 30) * Math.PI / 180;
            let vx = Math.cos(angle) * 6;
            let vy = Math.sin(angle) * 6;
            game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
        }
        
        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –º–µ—Å—Ç–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            this.x = originalX;
            this.y = originalY;
        }, 1000);
    }
    
    mirrorAttack() {
        // –ó–µ—Ä–∫–∞–ª—å–Ω–∞—è –∞—Ç–∞–∫–∞ - —Å–Ω–∞—Ä—è–¥—ã –ª–µ—Ç—è—Ç —Å –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
        let playerX = game.player.x;
        let playerY = game.player.y;
        
        for (let i = 0; i < 6; i++) {
            setTimeout(() => {
                // –°–ª–µ–≤–∞
                game.addProjectile(new Projectile(0, playerY, 5, 0, true));
                // –°–ø—Ä–∞–≤–∞
                game.addProjectile(new Projectile(800, playerY, -5, 0, true));
                // –°–≤–µ—Ä—Ö—É
                game.addProjectile(new Projectile(playerX, 0, 0, 5, true));
                // –°–Ω–∏–∑—É
                game.addProjectile(new Projectile(playerX, 600, 0, -5, true));
            }, i * 300);
        }
    }
    
    gravitationalPull() {
        // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤–∑—Ä—ã–≤–æ–º
        let centerX = 400;
        let centerY = 300;
        
        // –°–æ–∑–¥–∞–µ–º —Å–Ω–∞—Ä—è–¥—ã –ø–æ –∫—Ä–∞—è–º
        for (let i = 0; i < 20; i++) {
            let angle = (i * 18) * Math.PI / 180;
            let startX = centerX + Math.cos(angle) * 300;
            let startY = centerY + Math.sin(angle) * 200;
            
            setTimeout(() => {
                // –°–Ω–∞—Ä—è–¥—ã –ª–µ—Ç—è—Ç –∫ —Ü–µ–Ω—Ç—Ä—É
                let vx = -Math.cos(angle) * 3;
                let vy = -Math.sin(angle) * 3;
                game.addProjectile(new GravityProjectile(startX, startY, vx, vy, centerX, centerY));
            }, i * 50);
        }
    }
    
    bounceShots() {
        // –û—Ç—Å–∫–∞–∫–∏–≤–∞—é—â–∏–µ —Å–Ω–∞—Ä—è–¥—ã
        for (let i = 0; i < 8; i++) {
            setTimeout(() => {
                let angle = (i * 45) * Math.PI / 180;
                let vx = Math.cos(angle) * 4;
                let vy = Math.sin(angle) * 4;
                game.addProjectile(new BouncingProjectile(this.x, this.y, vx, vy));
            }, i * 150);
        }
    }
    
    timeDelayBombs() {
        // –ë–æ–º–±—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for (let i = 0; i < 6; i++) {
            let x = 100 + i * 120;
            let y = 200 + Math.random() * 200;
            
            setTimeout(() => {
                game.addProjectile(new DelayedBomb(x, y));
            }, i * 200);
        }
    }
    
    phantomClones() {
        // –§–∞–Ω—Ç–æ–º–Ω—ã–µ –∫–ª–æ–Ω—ã –∞—Ç–∞–∫—É—é—Ç
        let clonePositions = [
            [200, 150],
            [600, 150],
            [400, 250]
        ];
        
        clonePositions.forEach((pos, index) => {
            setTimeout(() => {
                for (let i = 0; i < 5; i++) {
                    let angle = (i * 72) * Math.PI / 180;
                    let vx = Math.cos(angle) * 4;
                    let vy = Math.sin(angle) * 4;
                    game.addProjectile(new Projectile(pos[0], pos[1], vx, vy, true));
                }
            }, index * 400);
        });
    }
    
    sineWaveAttack() {
        // –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–∞—è –≤–æ–ª–Ω–∞
        for (let i = 0; i < 50; i++) {
            setTimeout(() => {
                let x = i * 16;
                let y = 300 + Math.sin(i * 0.3) * 150;
                game.addProjectile(new Projectile(x, y, 3, 0, true));
            }, i * 80);
        }
    }
    
    vortexTrap() {
        // –í–∏—Ö—Ä–µ–≤–∞—è –ª–æ–≤—É—à–∫–∞
        let centerX = game.player.x;
        let centerY = game.player.y;
        
        for (let ring = 0; ring < 4; ring++) {
            for (let i = 0; i < 12; i++) {
                setTimeout(() => {
                    let angle = (i * 30 + ring * 15) * Math.PI / 180;
                    let radius = 50 + ring * 30;
                    let x = centerX + Math.cos(angle) * radius;
                    let y = centerY + Math.sin(angle) * radius;
                    
                    // –°–ø–∏—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∫ —Ü–µ–Ω—Ç—Ä—É
                    let vx = -Math.cos(angle) * 2 + Math.cos(angle + Math.PI/2) * 1;
                    let vy = -Math.sin(angle) * 2 + Math.sin(angle + Math.PI/2) * 1;
                    game.addProjectile(new Projectile(x, y, vx, vy, true));
                }, ring * 300 + i * 50);
            }
        }
    }
    
    railgunSnipe() {
        // –°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–π –≤—ã—Å—Ç—Ä–µ–ª —Ä–µ–ª—å—Å–æ—Ç—Ä–æ–Ω–æ–º
        let targetX = game.player.x;
        let targetY = game.player.y;
        
        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ - –∫—Ä–∞—Å–Ω–∞—è –ª–∏–Ω–∏—è
        setTimeout(() => {
            for (let i = 0; i < 30; i++) {
                setTimeout(() => {
                    game.addProjectile(new Projectile(this.x, this.y + i * 20, 0, 0, true, 10)); // –°—Ç–∞—Ç–∏—á–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
                }, i * 20);
            }
        }, 500);
        
        // –û—Å–Ω–æ–≤–Ω–æ–π –≤—ã—Å—Ç—Ä–µ–ª
        setTimeout(() => {
            for (let i = 0; i < 5; i++) {
                let dx = targetX - this.x;
                let dy = targetY - this.y;
                let dist = Math.sqrt(dx*dx + dy*dy);
                let vx = (dx / dist) * 12;
                let vy = (dy / dist) * 12;
                game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
            }
        }, 1000);
    }
    
    fragmentationBurst() {
        // –†–∞–∑—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Å–Ω–∞—Ä—è–¥—ã
        for (let i = 0; i < 4; i++) {
            setTimeout(() => {
                let angle = (i * 90) * Math.PI / 180;
                let vx = Math.cos(angle) * 3;
                let vy = Math.sin(angle) * 3;
                game.addProjectile(new FragmentProjectile(this.x, this.y, vx, vy));
            }, i * 200);
        }
    }
    
    shadowStep() {
        // –¢–µ–Ω–µ–≤–æ–π —à–∞–≥ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞—Ç–∞–∫–∞–º–∏
        let positions = [
            [200, 200],
            [600, 200],
            [400, 400],
            [200, 400],
            [600, 400]
        ];
        
        positions.forEach((pos, index) => {
            setTimeout(() => {
                // –¢–µ–ª–µ–ø–æ—Ä—Ç
                this.x = pos[0];
                this.y = pos[1];
                
                // –ê—Ç–∞–∫–∞ –∏–∑ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
                let dx = game.player.x - this.x;
                let dy = game.player.y - this.y;
                let dist = Math.sqrt(dx*dx + dy*dy);
                let vx = (dx / dist) * 5;
                let vy = (dy / dist) * 5;
                
                for (let j = 0; j < 3; j++) {
                    setTimeout(() => {
                        game.addProjectile(new Projectile(this.x, this.y, vx, vy, true));
                    }, j * 100);
                }
            }, index * 300);
        });
        
        // –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä
        setTimeout(() => {
            this.x = 400;
            this.y = 100;
        }, positions.length * 300);
    }
    
    energyBarrier() {
        // –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞—Ä—å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–∂–∏–º–∞–µ—Ç—Å—è
        for (let phase = 0; phase < 5; phase++) {
            setTimeout(() => {
                let radius = 300 - phase * 50;
                for (let i = 0; i < 16; i++) {
                    let angle = (i * 22.5) * Math.PI / 180;
                    let x = 400 + Math.cos(angle) * radius;
                    let y = 300 + Math.sin(angle) * radius;
                    
                    let vx = -Math.cos(angle) * 2;
                    let vy = -Math.sin(angle) * 2;
                    game.addProjectile(new Projectile(x, y, vx, vy, true));
                }
            }, phase * 400);
        }
    }
    
    meteorShower() {
        // –ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å
        for (let i = 0; i < 25; i++) {
            setTimeout(() => {
                let x = Math.random() * 800;
                let y = -50;
                let vx = (Math.random() - 0.5) * 4;
                let vy = 4 + Math.random() * 3;
                game.addProjectile(new MeteorProjectile(x, y, vx, vy));
            }, Math.random() * 2000);
        }
    }
    
    collidesWith(obj) {
        return this.x - this.width/2 < obj.x + obj.width/2 &&
               this.x + this.width/2 > obj.x - obj.width/2 &&
               this.y - this.height/2 < obj.y + obj.height/2 &&
               this.y + this.height/2 > obj.y - obj.height/2;
    }
    
    takeDamage() {
        this.hp--;
        game.createParticles(this.x, this.y, '#ff6600', 8);
    }
    
    render(ctx) {
        // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞—Ä—è–¥–∫–∏
        if (this.isCharging) {
            ctx.shadowBlur = 20;
            ctx.shadowColor = '#ff0066';
            
            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            let intensity = Math.sin(Date.now() * 0.02) * 0.5 + 0.5;
            ctx.globalAlpha = 0.3 + intensity * 0.4;
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (this.isVulnerable) {
            ctx.shadowBlur = 15;
            ctx.shadowColor = '#00ff00';
        }
        
        // –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–∑—ã
        let color = '#ff0066';
        switch (this.phase) {
            case 2: color = '#ff6600'; break;
            case 3: color = '#ff0000'; break;
        }
        
        if (this.isVulnerable) color = '#66ff66';
        
        ctx.fillStyle = color;
        ctx.fillRect(this.x - this.width/2, this.y - this.height/2, this.width, this.height);
        
        // HP –±–∞—Ä
        let hpWidth = (this.hp / this.maxHp) * this.width;
        ctx.fillStyle = '#ff0000';
        ctx.fillRect(this.x - this.width/2, this.y - this.height/2 - 15, this.width, 8);
        ctx.fillStyle = '#00ff00';
        ctx.fillRect(this.x - this.width/2, this.y - this.height/2 - 15, hpWidth, 8);
        
        ctx.globalAlpha = 1;
        ctx.shadowBlur = 0;
    }
}
export default Boss;
